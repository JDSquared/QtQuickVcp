/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "machinetalksyncclient.h"
#include "debughelper.h"

/** Generic Machinetalk Sync Client implementation */
MachinetalkSyncClient::MachinetalkSyncClient(QObject *parent) :
    QObject(parent),
    m_ready(false),
    m_socketUri(""),
    m_debugName(""),
    m_syncChannel(NULL),
    m_subChannel(NULL),
    m_pubChannel(NULL),
    m_state(Down),
    m_fsm(NULL),
    m_errorString("")
{
    // initialize sync channel
    m_syncChannel = new MachinetalkRpcClient(this);
    connect(m_syncChannel, SIGNAL(socketUriChanged(QString)),
            this, SIGNAL(syncUriChanged(QString)));
    connect(m_syncChannel, SIGNAL(stateChanged(MachinetalkRpcClient::State)),
            this, SLOT(syncChannelStateChanged(MachinetalkRpcClient::State)));
    connect(m_syncChannel, SIGNAL(socketMessageReceived(pb::Container)),
            this, SLOT(syncChannelMessageReceived(pb::Container)));
    // initialize sub channel
    m_subChannel = new MachinetalkSubscribe(this);
    connect(m_subChannel, SIGNAL(socketUriChanged(QString)),
            this, SIGNAL(subUriChanged(QString)));
    connect(m_subChannel, SIGNAL(stateChanged(MachinetalkSubscribe::State)),
            this, SLOT(subChannelStateChanged(MachinetalkSubscribe::State)));
    connect(m_subChannel, SIGNAL(socketMessageReceived(QByteArray, pb::Container)),
            this, SLOT(subChannelMessageReceived(QByteArray, pb::Container)));
    // initialize pub channel
    m_pubChannel = new MachinetalkPublish(this);
    connect(m_pubChannel, SIGNAL(socketUriChanged(QString)),
            this, SIGNAL(pubUriChanged(QString)));

    m_fsm = new QStateMachine(parent);
    QState *downState = new QState(m_fsm);
    connect(downState, SIGNAL(entered()), this, SLOT(fsmDownEntered()));
    QState *tryingState = new QState(m_fsm);
    connect(tryingState, SIGNAL(entered()), this, SLOT(fsmTryingEntered()));
    QState *syncingState = new QState(m_fsm);
    connect(syncingState, SIGNAL(entered()), this, SLOT(fsmSyncingEntered()));
    QState *syncedState = new QState(m_fsm);
    connect(syncedState, SIGNAL(entered()), this, SLOT(fsmSyncedEntered()));
    m_fsm->setInitialState(downState);
    m_fsm->start();

    downState->addTransition(this, SIGNAL(fsmConnect()), tryingState);
    tryingState->addTransition(this, SIGNAL(fsmSyncUp()), syncingState);
    tryingState->addTransition(this, SIGNAL(fsmDisconnect()), downState);
    syncingState->addTransition(this, SIGNAL(fsmSyncTrying()), tryingState);
    syncingState->addTransition(this, SIGNAL(fsmSubUp()), syncedState);
    syncingState->addTransition(this, SIGNAL(fsmDisconnect()), downState);
    syncedState->addTransition(this, SIGNAL(fsmSubTrying()), syncingState);
    syncedState->addTransition(this, SIGNAL(fsmSyncTrying()), tryingState);
    syncedState->addTransition(this, SIGNAL(fsmDisconnect()), downState);

    connect(this, SIGNAL(fsmConnect()), this, SLOT(startSyncChannel()));
    connect(this, SIGNAL(fsmConnect()), this, SLOT(startPubChannel()));
    connect(this, SIGNAL(fsmSyncUp()), this, SLOT(sendSync()));
    connect(this, SIGNAL(fsmSyncUp()), this, SLOT(startSubChannel()));
    connect(this, SIGNAL(fsmDisconnect()), this, SLOT(stopSyncChannel()));
    connect(this, SIGNAL(fsmDisconnect()), this, SLOT(stopSubChannel()));
    connect(this, SIGNAL(fsmDisconnect()), this, SLOT(stopPubChannel()));
    connect(this, SIGNAL(fsmSyncTrying()), this, SLOT(stopSubChannel()));
    connect(this, SIGNAL(fsmSubUp()), this, SLOT(synced()));
    connect(this, SIGNAL(fsmSubTrying()), this, SLOT(sendSync()));
}

MachinetalkSyncClient::~MachinetalkSyncClient()
{
    if (m_ready)
    {
        stop();
    }
}

/** Add a topic that should be subscribed **/
void MachinetalkSyncClient::addSubTopic(const QString &name)
{
    m_subChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void MachinetalkSyncClient::removeSubTopic(const QString &name)
{
    m_subChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void MachinetalkSyncClient::clearSubTopics()
{
    m_subChannel->clearSocketTopics();
}

void MachinetalkSyncClient::start()
{
#ifdef QT_DEBUG
   DEBUG_TAG(1, m_debugName, "start");
#endif

   emit fsmConnect();
}

void MachinetalkSyncClient::stop()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "stop");
#endif

    emit fsmDisconnect();
}

void MachinetalkSyncClient::startSyncChannel()
{
    m_syncChannel->setReady(true);
}

void MachinetalkSyncClient::stopSyncChannel()
{
    m_syncChannel->setReady(false);
}

void MachinetalkSyncClient::startSubChannel()
{
    m_subChannel->setReady(true);
}

void MachinetalkSyncClient::stopSubChannel()
{
    m_subChannel->setReady(false);
}

void MachinetalkSyncClient::startPubChannel()
{
    m_pubChannel->setReady(true);
}

void MachinetalkSyncClient::stopPubChannel()
{
    m_pubChannel->setReady(false);
}

/** Processes all message received on the 0MQ socket */
void MachinetalkSyncClient::syncChannelMessageReceived(pb::Container *rx)
{

    emit syncMessageReceived(rx);
}

void MachinetalkSyncClient::sendSyncMessage(pb::ContainerType type, pb::Container *tx)
{
    m_syncChannel->sendSocketMessage(type, tx);
}

void MachinetalkSyncClient::sendSync()
{
    pb::Container *tx = &m_syncTx;
    sendSyncMessage(pb::MT_SYNC, tx);
}

/** Processes all message received on the 0MQ socket */
void MachinetalkSyncClient::subChannelMessageReceived(const QByteArray &topic, pb::Container *rx)
{

    emit subMessageReceived(topic, rx);
}

void MachinetalkSyncClient::sendPubMessage(const QByteArray &topic, pb::ContainerType type, pb::Container *tx)
{
    m_pubChannel->sendSocketMessage(topic, type, tx);
}

void MachinetalkSyncClient::sendIncrementalUpdate(const QByteArray &topic, pb::Container *tx)
{
    sendPubMessage(topic, pb::MT_INCREMENTAL_UPDATE, tx);
}

void MachinetalkSyncClient::fsmDownEntered()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "DOWN");
#endif
    m_state = Down;
    emit stateChanged(m_state);
}

void MachinetalkSyncClient::fsmTryingEntered()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "TRYING");
#endif
    m_state = Trying;
    emit stateChanged(m_state);
}

void MachinetalkSyncClient::fsmSyncingEntered()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "SYNCING");
#endif
    m_state = Syncing;
    emit stateChanged(m_state);
}

void MachinetalkSyncClient::fsmSyncedEntered()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "SYNCED");
#endif
    m_state = Synced;
    emit stateChanged(m_state);
}

void MachinetalkSyncClient::syncChannelStateChanged(MachinetalkRpcClient::State state)
{

    if (state == MachinetalkRpcClient::Trying)
    {
        if (m_state == Syncing)
        {
            emit fsmSyncTrying();
        }
        if (m_state == Synced)
        {
            emit fsmSyncTrying();
        }
    }

    if (state == MachinetalkRpcClient::Up)
    {
        if (m_state == Trying)
        {
            emit fsmSyncUp();
        }
    }
}

void MachinetalkSyncClient::subChannelStateChanged(MachinetalkSubscribe::State state)
{

    if (state == MachinetalkSubscribe::Trying)
    {
        if (m_state == Synced)
        {
            emit fsmSubTrying();
        }
    }

    if (state == MachinetalkSubscribe::Up)
    {
        if (m_state == Syncing)
        {
            emit fsmSubUp();
        }
    }
}
