/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "machinetalkpublish.h"
#include "debughelper.h"

/** Generic Machinetalk Publish implementation */
MachinetalkPublish::MachinetalkPublish(QObject *parent) :
    QObject(parent),
    m_ready(false),
    m_socketUri(""),
    m_debugName(""),
    m_context(NULL),
    m_socket(NULL),
    m_state(Down),
    m_fsm(NULL),
    m_errorString("")
{

    m_fsm = new QStateMachine(parent);
    QState *downState = new QState(m_fsm);
    connect(downState, SIGNAL(entered()), this, SLOT(fsmDownEntered()));
    QState *upState = new QState(m_fsm);
    connect(upState, SIGNAL(entered()), this, SLOT(fsmUpEntered()));
    m_fsm->setInitialState(downState);
    m_fsm->start();

    downState->addTransition(this, SIGNAL(fsmConnect()), upState);
    upState->addTransition(this, SIGNAL(fsmDisconnect()), downState);

    connect(this, SIGNAL(fsmConnect()), this, SLOT(connectSockets()));
    connect(this, SIGNAL(fsmDisconnect()), this, SLOT(disconnectSockets()));

    m_context = new SocketNotifierZMQContext(this, 1);
    connect(m_context, SIGNAL(notifierError(int,QString)),
            this, SLOT(socketError(int,QString)));
    m_context->start();
}

MachinetalkPublish::~MachinetalkPublish()
{
    if (m_ready)
    {
        stop();
    }

    if (m_context != NULL)
    {
        m_context->stop();
        m_context->deleteLater();
        m_context = NULL;
    }
}

/** Connects the 0MQ sockets */
bool MachinetalkPublish::connectSockets()
{
    m_socket = m_context->createSocket(ZMQSocket::TYP_PUB, this);
    m_socket->setLinger(0);

    try {
        m_socket->connectTo(m_socketUri);
    }
    catch (const zmq::error_t &e) {
        QString errorString;
        errorString = QString("Error %1: ").arg(e.num()) + QString(e.what());
        //updateState(SocketError, errorString);
        return false;
    }

#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "sockets connected" << m_socketUri);
#endif

    return true;
}

/** Disconnects the 0MQ sockets */
void MachinetalkPublish::disconnectSockets()
{
    if (m_socket != NULL)
    {
        m_socket->close();
        m_socket->deleteLater();
        m_socket = NULL;
    }
}

void MachinetalkPublish::start()
{
#ifdef QT_DEBUG
   DEBUG_TAG(1, m_debugName, "start");
#endif

   emit fsmConnect();
}

void MachinetalkPublish::stop()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "stop");
#endif

    emit fsmDisconnect();
}

void MachinetalkPublish::sendSocketMessage(const QByteArray &topic, pb::ContainerType type, pb::Container *tx)
{
    if (m_socket == NULL) {  // disallow sending messages when not connected
        return;
    }

    tx->set_type(type);
#ifdef QT_DEBUG
    std::string s;
    gpb::TextFormat::PrintToString(*tx, &s);
    DEBUG_TAG(3, m_debugName, "sent message" << QString::fromStdString(s));
#endif
    try {
        QList<QByteArray> message;
        message.append(topic);
        message.append(QByteArray(tx->SerializeAsString().c_str(), tx->ByteSize()));
        m_socket->sendMessage(message);
    }
    catch (const zmq::error_t &e) {
        QString errorString;
        errorString = QString("Error %1: ").arg(e.num()) + QString(e.what());
        //updateState(SocketError, errorString);
        return;
    }
    tx->Clear();
}

void MachinetalkPublish::sendPing(const QByteArray &topic)
{
    pb::Container *tx = &m_socketTx;
    sendSocketMessage(topic, pb::MT_PING, tx);
}

void MachinetalkPublish::socketError(int errorNum, const QString &errorMsg)
{
    QString errorString;
    errorString = QString("Error %1: ").arg(errorNum) + errorMsg;
    //updateState(SocketError, errorString);
}

void MachinetalkPublish::fsmDownEntered()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "DOWN");
#endif
    m_state = Down;
    emit stateChanged(m_state);
}

void MachinetalkPublish::fsmUpEntered()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "UP");
#endif
    m_state = Up;
    emit stateChanged(m_state);
}
