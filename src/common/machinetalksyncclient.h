/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#ifndef MACHINETALK_SYNC_CLIENT_H
#define MACHINETALK_SYNC_CLIENT_H
#include <QObject>
#include <QStateMachine>
#include <nzmqt/nzmqt.hpp>
#include <machinetalk/protobuf/message.pb.h>
#include <google/protobuf/text_format.h>
#include "machinetalkrpcclient.h"
#include "machinetalksubscribe.h"
#include "machinetalkpublish.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

class MachinetalkSyncClient : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool ready READ ready WRITE setReady NOTIFY readyChanged)
    Q_PROPERTY(QString syncUri READ syncUri WRITE setSyncUri NOTIFY syncUriChanged)
    Q_PROPERTY(QString subUri READ subUri WRITE setSubUri NOTIFY subUriChanged)
    Q_PROPERTY(QString pubUri READ pubUri WRITE setPubUri NOTIFY pubUriChanged)
    Q_PROPERTY(QString debugName READ debugName WRITE setDebugName NOTIFY debugNameChanged)
    Q_PROPERTY(State state READ state NOTIFY stateChanged)
    Q_PROPERTY(QString errorString READ errorString NOTIFY errorStringChanged)
    Q_ENUMS(State)

public:
    explicit MachinetalkSyncClient(QObject *parent = 0);
    ~MachinetalkSyncClient();

    enum State {
        Down = 0,
        Trying = 1,
        Syncing = 2,
        Synced = 3,
    };

    QString syncUri() const
    {
        return m_syncChannel->socketUri();
    }

    QString subUri() const
    {
        return m_subChannel->socketUri();
    }

    QString pubUri() const
    {
        return m_pubChannel->socketUri();
    }

    QString debugName() const
    {
        return m_debugName;
    }

    State state() const
    {
        return m_state;
    }

    QString errorString() const
    {
        return m_errorString;
    }

    bool ready() const
    {
        return m_ready;
    }

public slots:

    void setSyncUri(QString uri)
    {
        m_syncChannel->setSocketUri(uri);
    }

    void setSubUri(QString uri)
    {
        m_subChannel->setSocketUri(uri);
    }

    void setPubUri(QString uri)
    {
        m_pubChannel->setSocketUri(uri);
    }

    void setDebugName(QString debugName)
    {
        if (m_debugName == debugName)
            return;

        m_debugName = debugName;
        emit debugNameChanged(debugName);
    }

    void setReady(bool ready)
    {
        if (m_ready == ready)
            return;

        m_ready = ready;
        emit readyChanged(ready);

        if (m_ready)
        {
            start();
        }
        else
        {
            stop();
        }
    }

    void sendSyncMessage(pb::ContainerType type, pb::Container *tx);

    void sendPubMessage(const QByteArray &topic, pb::ContainerType type, pb::Container *tx);
    void sendIncrementalUpdate(const QByteArray &topic, pb::Container *tx);
    void addSubTopic(const QString &name);
    void removeSubTopic(const QString &name);
    void clearSubTopics();

private:
    bool m_ready;
    QString m_socketUri;
    QString m_debugName;

    MachinetalkRpcClient *m_syncChannel;
    QSet<QString> m_subTopics;      // the topics we are interested in
    MachinetalkSubscribe *m_subChannel;
    MachinetalkPublish *m_pubChannel;

    State         m_state;
    QStateMachine *m_fsm;
    QString       m_errorString;
    // more efficient to reuse a protobuf Messages
    pb::Container m_syncRx;
    pb::Container m_syncTx;
    pb::Container m_subRx;
    pb::Container m_pubTx;

    void start();
    void stop();

private slots:

    void startSyncChannel();
    void stopSyncChannel();
    void syncChannelStateChanged(MachinetalkRpcClient::State state);
    void syncChannelMessageReceived(pb::Container *rx);
    void sendSync();

    void startSubChannel();
    void stopSubChannel();
    void subChannelStateChanged(MachinetalkSubscribe::State state);
    void subChannelMessageReceived(const QByteArray &topic, pb::Container *rx);

    void startPubChannel();
    void stopPubChannel();

    void fsmDownEntered();
    void fsmTryingEntered();
    void fsmSyncingEntered();
    void fsmSyncedEntered();

signals:

    void syncUriChanged(QString uri);
    void subUriChanged(QString uri);
    void pubUriChanged(QString uri);
    void syncMessageReceived(pb::Container *rx);
    void subMessageReceived(QByteArray topic, pb::Container *rx);
    void debugNameChanged(QString debugName);
    void stateChanged(MachinetalkSyncClient::State state);
    void errorStringChanged(QString errorString);
    void readyChanged(bool ready);
    // fsm
    void fsmConnect();
    void fsmSyncUp();
    void fsmDisconnect();
    void fsmSyncTrying();
    void fsmSubUp();
    void fsmSubTrying();
};

#endif //MACHINETALK_SYNC_CLIENT_H
