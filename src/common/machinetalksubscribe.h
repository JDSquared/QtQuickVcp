/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#ifndef MACHINETALK_SUBSCRIBE_H
#define MACHINETALK_SUBSCRIBE_H
#include <QObject>
#include <QStateMachine>
#include <nzmqt/nzmqt.hpp>
#include <machinetalk/protobuf/message.pb.h>
#include <google/protobuf/text_format.h>

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

class MachinetalkSubscribe : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool ready READ ready WRITE setReady NOTIFY readyChanged)
    Q_PROPERTY(QString socketUri READ socketUri WRITE setSocketUri NOTIFY socketUriChanged)
    Q_PROPERTY(QString debugName READ debugName WRITE setDebugName NOTIFY debugNameChanged)
    Q_PROPERTY(State state READ state NOTIFY stateChanged)
    Q_PROPERTY(QString errorString READ errorString NOTIFY errorStringChanged)
    Q_PROPERTY(int heartbeatPeriod READ heartbeatPeriod WRITE setHeartbeatPeriod NOTIFY heartbeatPeriodChanged)
    Q_ENUMS(State)

public:
    explicit MachinetalkSubscribe(QObject *parent = 0);
    ~MachinetalkSubscribe();

    enum State {
        Down = 0,
        Trying = 1,
        Up = 2,
    };

    QString socketUri() const
    {
        return m_socketUri;
    }

    QString debugName() const
    {
        return m_debugName;
    }

    State state() const
    {
        return m_state;
    }

    QString errorString() const
    {
        return m_errorString;
    }

    int heartbeatPeriod() const
    {
        return m_heartbeatPeriod;
    }

    bool ready() const
    {
        return m_ready;
    }

public slots:

    void setSocketUri(QString uri)
    {
        if (m_socketUri == uri)
            return;

        m_socketUri = uri;
        emit socketUriChanged(uri);
    }

    void setDebugName(QString debugName)
    {
        if (m_debugName == debugName)
            return;

        m_debugName = debugName;
        emit debugNameChanged(debugName);
    }

    void setHeartbeatPeriod(int heartbeatPeriod)
    {
        if (m_heartbeatPeriod == heartbeatPeriod)
            return;

        m_heartbeatPeriod = heartbeatPeriod;
        emit heartbeatPeriodChanged(heartbeatPeriod);
    }

    void setReady(bool ready)
    {
        if (m_ready == ready)
            return;

        m_ready = ready;
        emit readyChanged(ready);

        if (m_ready)
        {
            start();
        }
        else
        {
            stop();
        }
    }
    void addSocketTopic(const QString &name);
    void removeSocketTopic(const QString &name);
    void clearSocketTopics();

private:
    bool m_ready;
    QString m_socketUri;
    QString m_debugName;

    QSet<QString> m_socketTopics;   // the topics we are interested in
    SocketNotifierZMQContext *m_context;
    ZMQSocket  *m_socket;

    State         m_state;
    QStateMachine *m_fsm;
    QString       m_errorString;

    QTimer     *m_heartbeatTimer;
    int         m_heartbeatPeriod;
    int         m_heartbeatErrorCount;
    int         m_heartbeatErrorThreshold;
    // more efficient to reuse a protobuf Messages
    pb::Container m_socketRx;

    void start();
    void stop();

private slots:

    void heartbeatTimerTick();
    void resetHeartbeatError();
    void resetHeartbeatTimer();
    void startHeartbeatTimer();
    void stopHeartbeatTimer();

    bool connectSockets();
    void disconnectSockets();
    void subscribe();

    void socketMessageReceived(QList<QByteArray> messageList);
    void socketError(int errorNum, const QString& errorMsg);


    void fsmDownEntered();
    void fsmTryingEntered();
    void fsmUpEntered();

signals:

    void socketUriChanged(QString uri);
    void socketMessageReceived(QByteArray topic, pb::Container *rx);
    void debugNameChanged(QString debugName);
    void stateChanged(MachinetalkSubscribe::State state);
    void errorStringChanged(QString errorString);
    void heartbeatPeriodChanged(int heartbeatPeriod);
    void readyChanged(bool ready);
    // fsm
    void fsmConnect();
    void fsmConnected();
    void fsmDisconnect();
    void fsmTimeout();
};

#endif //MACHINETALK_SUBSCRIBE_H
